import { Commitment, ConfirmOptions, Connection, PublicKey, SendOptions, Signer, Transaction, VersionedTransaction } from "@solana/web3.js";
import { Provider, Wallet } from "@coral-xyz/anchor";
import { ProgramTestContext } from "solana-bankrun";
import { SuccessfulTxSimulationResponse } from "@coral-xyz/anchor/dist/cjs/utils/rpc";
export { startAnchor } from "solana-bankrun";
export declare class BankrunProvider implements Provider {
    context: ProgramTestContext;
    wallet: Wallet;
    connection: Connection;
    publicKey: PublicKey;
    constructor(context: ProgramTestContext, wallet?: Wallet);
    send?(tx: Transaction | VersionedTransaction, signers?: Signer[] | undefined, opts?: SendOptions | undefined): Promise<string>;
    sendAndConfirm?(tx: Transaction | VersionedTransaction, signers?: Signer[] | undefined, opts?: ConfirmOptions | undefined): Promise<string>;
    sendAll<T extends Transaction | VersionedTransaction>(txWithSigners: {
        tx: T;
        signers?: Signer[] | undefined;
    }[], opts?: ConfirmOptions | undefined): Promise<string[]>;
    simulate(tx: Transaction | VersionedTransaction, signers?: Signer[] | undefined, commitment?: Commitment | undefined, includeAccounts?: boolean | PublicKey[] | undefined): Promise<SuccessfulTxSimulationResponse>;
}
